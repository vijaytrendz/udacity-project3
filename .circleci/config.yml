version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Delete s3 bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            exit 0

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.     
    steps:
      - run:
          name: Revert migrations
          working_directory: ./backend
          command: |
            SUCCESS=$(curl -H "token: a162308a-4853-437f-a761-ec2ff38209c5" --request GET https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7})
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              pwd
              ls -la
              npm run migrations:revert
            fi
          when: on_fail
            
jobs:

  install-backend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./backend
          command: pwd; ls -la && npm install
      - persist_to_workspace:
          root: .
          paths:
            - backend/node_modules

  install-frontend-dependencies:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: npm install
          working_directory: ./frontend
          command: ls -la && npm install; pwd
      - persist_to_workspace:
          root: .
          paths:
            - frontend/node_modules

  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Frontend Build
          command: |
            cd frontend
            npm i
            npm run build
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Backend build
          command: |
            cd backend
            npm i
            npm run build
            pwd
            
      - persist_to_workspace:
          root: .
          paths:
            - backend/dist

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test frontend
          command: |
            cd frontend
            npm i
            npm test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: test backend
          command: |
            cd backend
            npm i
            npm test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Check Frontend against security vulnerabilities
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical
      - restore_cache:
          key: v1-frontend-build

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Check Backend against security vulnerabilities
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
      - restore_cache:
          key: v1-backend-build

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git check
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
          
      - run:
          name: Ensure back-end infrastructure exists
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file backend.yml --region=ap-south-1 \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Save backend URL in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "$BACKEND_IP"
            curl -H "Content-Type: text/plain" -H "token: a162308a-4853-437f-a761-ec2ff38209c5" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
            
      - run:
          name: Ensure front-end infrastructure exist
          working_directory: ./.circleci/files
          command: |
            aws cloudformation deploy \
              --template-file frontend.yml --region=ap-south-1 \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

#      - run:
#         name: "Get the IP Address of the Backend EC2 instance and create inventory"
#          command: |
#            echo -e "[web]\n" > ./.circleci/ansible/inventory
#            aws ec2 describe-instances \
#              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#              --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --output text >> ./.circleci/ansible/inventory
#            cat ./.circleci/ansible/inventory

      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            echo -e "[web]\n" > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> inventory.txt
              cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt

      # Here's where you will add some code to rollback on failure
      - destroy-environment      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["c3:64:04:19:5c:22:13:8d:3c:0e:e9:f6:01:34:5e:c9"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd &&
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
#      -   run:
#          name: Creating environment file for backend
#           command: |
#             echo -e "NODE_ENV=production\nVERSION=1\nTYPEORM_CONNECTION=${TYPEORM_CONNECTION}\nTYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR} \nTYPEORM_ENTITIES=${TYPEORM_ENTITIES}\nTYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}\nTYPEORM_HOST=${TYPEORM_HOST}\nTYPEORM_PORT=${TYPEORM_PORT}\nTYPEORM_USERNAME=${TYPEORM_USERNAME}\nTYPEORM_PASSWORD=${TYPEORM_PASSWORD}\nTYPEORM_DATABASE=${TYPEORM_DATABASE}\nENVIRONMENT=production" > ./backend/.env
#             cat ./backend/.env
#             cat ./.circleci/ansible/inventory
#             pwd
#      - persist_to_workspace:
#           root: ~/project
#           paths:
#             - ./backend/.env
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run: #Added environment variables
          name: Run migrations
          working_directory: ./backend
          command: |
            ls .
            npm install
            npm run migrations:revert
            npm run migrations > migration_status
            cat migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration successful, updating memstash..."
              curl -H "Content-Type: text/plain" -H "token: a162308a-4853-437f-a761-ec2ff38209c5" --request PUT --data "success" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: a162308a-4853-437f-a761-ec2ff38209c5" --request PUT --data "fail" https://api.memstash.io/values/DB_MIGRATION_${CIRCLE_WORKFLOW_ID:0:7}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
     # Here's where you will add some code to rollback on failure 
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          working_directory: /tmp
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          working_directory: ./frontend
          command: |
            # your code here
            export API_URL=$(curl -H "token: a162308a-4853-437f-a761-ec2ff38209c5" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "${API_URL}"
            npm install
            npm run build

      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            aws s3 cp ./dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure     
      - destroy-environment
      - revert-migrations
                    
  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c3:64:04:19:5c:22:13:8d:3c:0e:e9:f6:01:34:5e:c9"]
      - attach_workspace:
          at: .
    
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version 
            export ANSIBLE_HOST_KEY_CHECKING=False

      - run:
          name: Compress dist Files
          command: |
            cd /home
            tar -cvzf backend.tar.gz /home/circleci/project/backend
            
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          no_output_timeout: 30m          
          command: |
            pwd
            export ANSIBLE_HOST_KEY_CHECKING=False 
            export host_key_checking=False
            export record_host_keys=False
            cat inventory.txt

            ansible-playbook -i inventory.txt deploy-backend.yml -vv
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.9.0-alpine 
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: /tmp
          command: |
            apk add --update curl nodejs npm
            pip install awscli

      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            export BACKEND_URL=$(curl -H "token: a162308a-4853-437f-a761-ec2ff38209c5" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo "$BACKEND_URL"
            curl "$BACKEND_URL/api/status"

      - run:
          name: Frontend smoke test.
          working_directory: ./backend
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/index.html"
            curl -s ${URL} | grep -q "Welcome"
      - destroy-environment
      - revert-migrations

#  cloudfront-update:
#    docker:
      # Docker image here that supports AWS CLI
#    steps:
      # Checkout code from git
#      - run:
#          name: Install dependencies
#          command: |
            # your code here
#      - run:
#          name: Update cloudfront distribution
#          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

#cleanup:
#    docker:
      # Docker image here
#    steps:
      # Checkout code from git
#      - run:
#          name: Get old stack workflow id
#          command: |
            # your code here
#            export OldWorkflowID="the id here"
#            export STACKS=[] #put the list of stacks here
#      - run:
#          name: Remove old stacks and files
#          command: |
#            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#            then
              # your code here
#            fi
            

workflows:
  default:
    jobs:
      - install-backend-dependencies
      - install-frontend-dependencies
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          #Run migrations code run
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]
#checking-3